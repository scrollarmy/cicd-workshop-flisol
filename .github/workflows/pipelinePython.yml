name: pipelinePython

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  APP_NAME: surveyapp
  USERNAME: ${{ secrets.DOCKER_USERNAME }}

permissions:
  contents: read


jobs:
  tagging:
    runs-on: ubuntu-latest
    outputs:
      nextver: ${{ steps.calculate_version.outputs.next_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get latest release version
        id: get_release
        run: |
          set -x
          echo "------------------------"
          release_version=$(curl -s "https://api.github.com/repos/${GITHUB_REPOSITORY}/tags" | python -c "import sys, json; print(json.load(sys.stdin)[0].get('name', 'v0.0.0'))")
          echo "release_version=$release_version" >> "$GITHUB_OUTPUT"
          echo "::debug::Release version seteado $release_version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate next version
        id: calculate_version
        env:
          release_version: ${{ steps.get_release.outputs.release_version }}
          branch_name: ${{ github.ref }}
        run: |
          set -x
          current_version=$release_version
          echo "::debug:: Branch name $branch_name"
          if [[ "$branch_name" == "refs/heads/main" ]]; then
            next_version=$(echo "$current_version" | sed 's/^v//' | awk -F. '{$1 = $1 + 1;} 1' | sed 's/ /./g')
          elif [[ "$branch_name" == "refs/heads/develop" ]]; then
            next_version=$(echo "$current_version" | sed 's/^v//' | awk -F. '{$2 = $2 + 1;} 1' | sed 's/ /./g')
          fi
          echo "::debug::Next version $next_version"
          echo "next_version=$next_version" >> "$GITHUB_OUTPUT"
          

  test:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'opened' &&
      contains(fromJSON('["develop", "main"]'), github.event.pull_request.base.ref)
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest
          

  build-image:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: tagging
    steps:
    - uses: actions/checkout@v4
    - uses: mr-smithers-excellent/docker-build-push@v6
      name: Build and push Docker image
      env:
          tag: ${{ needs.tagging.outputs.nextver }}
      with:
        image: $USERNAME/$APP_NAME
        tags: $tag
        registry: docker.io
        username: $USERNAME
        password: ${{ secrets.DOCKER_PASSWORD }}

  repo-tag:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [tagging, build-image]
    steps:
    - uses: actions/github-script@v7.0.1
      name: Tagging repo
      env:
        tag: ${{ needs.tagging.outputs.nextver }}
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/${{ needs.tagging.outputs.nextver }}',              
            sha: context.sha
          })
     